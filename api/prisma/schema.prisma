generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARTICIPANT
  EVALUATION_COMMITTEE
  MARKETING

  @@map("role")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String
  role     Role
  cpf      String @unique
  position String
  baseId   String @map("base_id") @db.Uuid
  base     Base   @relation(fields: [baseId], references: [id])

  usersProjects UsersProjects[]

  createdQuestions  Question[] @relation("CreatedQuestions") // Perguntas criadas por este usuário
  receivedQuestions Question[] @relation("ReceivedQuestions") // Perguntas recebidas por este usuário
  files             File[]

  @@map("users")
}

model Base {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  state String
  users User[]

  @@map("bases")
}

enum StatusProject {
  DRAFT
  SUBMITED
  UNDER_REVIEW
  REVIEWED

  @@map("status_projects")
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String
  status      StatusProject

  // user User @relation(fields: [userId], references: [id])
  usersProjects UsersProjects[]
  files         File[]
  questions     Question[]

  @@map("projects")
}

model UsersProjects {
  userId    String @map("user_id") @db.Uuid
  projectId String @map("project_id") @db.Uuid

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("users_projects")
}

model File {
  id        String @id @default(uuid()) @db.Uuid
  projectId String @map("project_id") @db.Uuid
  userId    String @map("user_id") @db.Uuid
  path      String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("files")
}

enum StatusQuestion {
  SUBMITED
  VIEWED
  COMPLETED

  @@map("status_questions")
}

model Question {
  id          String         @id @default(uuid()) @db.Uuid
  text        String
  status      StatusQuestion @default(SUBMITED)
  projectId   String         @map("project_id") @db.Uuid
  createdById String         @map("created_by") @db.Uuid
  sentToId    String         @map("sent_to") @db.Uuid

  createdBy User    @relation("CreatedQuestions", fields: [createdById], references: [id], onDelete: Cascade)
  sentTo    User    @relation("ReceivedQuestions", fields: [sentToId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("questions")
}

enum PeriodType {
  SUBSCRIPTION
  AVALIATION
  RESUBSCRIPTION
  REAVALIATION
  FINAL
  INACTIVE

  @@map("period_type")
}

model Period {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  type        PeriodType

  @@map("periods")
}
